/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FeeSwapUtils,
  FeeSwapUtilsInterface,
} from "../../../contracts/fee/FeeSwapUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "DisabledMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingAmount",
        type: "uint256",
      },
    ],
    name: "InvalidAmountInForFeeBatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeBatchTokensLength",
        type: "uint256",
      },
    ],
    name: "InvalidFeeBatchTokenIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "InvalidSwapMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedOutputToken",
        type: "address",
      },
    ],
    name: "InvalidSwapOutputToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "bridgingToken",
        type: "address",
      },
    ],
    name: "InvalidSwapPathForV1",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "UnableToGetOppositeToken",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6116d661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80635cc28b0714610045578063e1af6c2d14610067575b600080fd5b81801561005157600080fd5b50610065610060366004610f38565b610087565b005b81801561007357600080fd5b50610065610082366004610fd3565b61027a565b6000806100968a888887610534565b91509150876001600160a01b031685600187516100b391906110b0565b815181106100c3576100c36110c3565b60200260200101516001600160a01b0316146100ff57848860405163339727dd60e11b81526004016100f692919061111d565b60405180910390fd5b8382604001518781518110610116576101166110c3565b6020026020010181815161012a91906110b0565b90525060405163e1fbaed360e01b815273__$0bd2986ff9eae1ca31d173b6c133f035a7$__9063e1fbaed390610168908d908b908790600401611177565b60006040518083038186803b15801561018057600080fd5b505af4158015610194573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038416925063095ea7b391506101c6908c908890600401611231565b6020604051808303816000875af11580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610209919061124a565b50604051633011f4b360e11b81526001600160a01b038a1690636023e9669061023c90889088908890309060040161126c565b600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b5050505050505050505050505050565b6000806102898d8a8a88610534565b915091506102998d87838d610682565b60006102aa8e89848a8a8a8a6106ce565b90508583604001518a815181106102c3576102c36110c3565b602002602001018181516102d791906110b0565b9150818152505073__$0bd2986ff9eae1ca31d173b6c133f035a7$__63e1fbaed38f8c866040518463ffffffff1660e01b815260040161031993929190611177565b60006040518083038186803b15801561033157600080fd5b505af4158015610345573d6000803e3d6000fd5b50505050816001600160a01b031663095ea7b38e886040518363ffffffff1660e01b8152600401610377929190611231565b6020604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba919061124a565b5060008c6001600160a01b031663083cfcee34846040518363ffffffff1660e01b81526004016103ea919061137e565b60206040518083038185885af1158015610408573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061042d9190611453565b90508e6001600160a01b0316634e91db08610447836108a3565b8d6040518363ffffffff1660e01b815260040161046592919061146c565b6020604051808303816000875af1158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190611453565b508e6001600160a01b031663e2a4853a6104c18361092b565b8c6040518363ffffffff1660e01b81526004016104df92919061146c565b6020604051808303816000875af11580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190611453565b50505050505050505050505050505050565b61055f6040518060800160405280606081526020016060815260200160608152602001600081525090565b60008073__$0bd2986ff9eae1ca31d173b6c133f035a7$__63fdfc26f388886040518363ffffffff1660e01b815260040161059b929190611231565b600060405180830381865af41580156105b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e091908101906114d5565b80515190915085111561060b5780515160405163fa80439960e01b81526100f691879160040161146c565b600081600001518681518110610623576106236110c3565b60200260200101519050600082604001518781518110610645576106456110c3565b6020026020010151905080861115610674578581604051634560a37360e11b81526004016100f692919061146c565b509097909650945050505050565b600061068f85858561096c565b9050816001600160a01b0316816001600160a01b0316146106c7578082604051636ba3dd8b60e01b81526004016100f69291906115f2565b5050505050565b6106d6610d26565b60006040518060e00160405280306001600160a01b03168152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b031681526020018781525090506000896001600160a01b031663bd02d0f560405160200161078f9060208082526016908201527513505617d0d05313109050d2d7d1d054d7d31253525560521b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016107c391815260200190565b602060405180830381865afa1580156107e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190611453565b905060006040518060e0016040528060008152602001888152602001600081526020016000815260200187815260200183815260200186815250905060006040518061010001604052808581526020018381526020016000600781111561086d5761086d611344565b81526020016000815260006020820181905260408201819052606082018190526080909101529c9b505050505050505050505050565b60006040516020016108e6906020808252601e908201527f4645455f4449535452494255544f525f535741505f4645455f42415443480000604082015260600190565b604051602081830303815290604052805190602001208260405160200161090e92919061146c565b604051602081830303815290604052805190602001209050919050565b60006040516020016108e6906020808252818101527f4645455f4449535452494255544f525f535741505f544f4b454e5f494e444558604082015260600190565b6000818161097a86866109d4565b805190915060005b818110156109c857600083828151811061099e5761099e6110c3565b602002602001015190506109b28582610a9c565b94505080806109c09061160c565b915050610982565b50919695505050505050565b6060600082516001600160401b038111156109f1576109f1610e33565b604051908082528060200260200182016040528015610a2a57816020015b610a17610de4565b815260200190600190039081610a0f5790505b50905060005b8351811015610a92576000848281518110610a4d57610a4d6110c3565b60200260200101519050610a618682610b0b565b838381518110610a7357610a736110c3565b6020026020010181905250508080610a8a9061160c565b915050610a30565b5090505b92915050565b600081604001516001600160a01b0316836001600160a01b031603610ac657506060810151610a96565b81606001516001600160a01b0316836001600160a01b031603610aee57506040810151610a96565b8151604051637a0ca68160e01b81526100f69185916004016115f2565b610b13610de4565b60405163a8d8fff560e01b815260009073__$ff439aa65a80c9eec648f15db20b189505$__9063a8d8fff590610b4f90879087906004016115f2565b608060405180830381865af4158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190611625565b9050610b9c8482610ba3565b9392505050565b610bad8282610bee565b80606001516001600160a01b031681604001516001600160a01b031603610bea5780516040516332e6f44d60e21b81526100f6919060040161168c565b5050565b80516001600160a01b0316610c16576040516302fde0d760e11b815260040160405180910390fd5b6000826001600160a01b0316637ae1cfca610c348460000151610cbc565b6040518263ffffffff1660e01b8152600401610c5291815260200190565b602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c93919061124a565b90508015610cb75781516040516309f8c93760e01b81526100f6919060040161168c565b505050565b6000604051602001610cf4906020808252601290820152711254d7d3505492d15517d11254d05093115160721b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0384169082015260600161090e565b604080516101e081019091526000610100820181815261012083018290526101408301829052610160830182905261018083018290526101a083019190915260606101c083015281908152602001610db46040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152600060208201819052604082018190526060820181905260809091015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6001600160a01b0381168114610e2057600080fd5b50565b8035610e2e81610e0b565b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610e6b57610e6b610e33565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610e9957610e99610e33565b604052919050565b60006001600160401b03821115610eba57610eba610e33565b5060051b60200190565b600082601f830112610ed557600080fd5b81356020610eea610ee583610ea1565b610e71565b82815260059290921b84018101918181019086841115610f0957600080fd5b8286015b84811015610f2d578035610f2081610e0b565b8352918301918301610f0d565b509695505050505050565b600080600080600080600080610100898b031215610f5557600080fd5b8835610f6081610e0b565b97506020890135610f7081610e0b565b96506040890135610f8081610e0b565b9550606089013594506080890135935060a08901356001600160401b03811115610fa957600080fd5b610fb58b828c01610ec4565b93505060c0890135915060e089013590509295985092959890939650565b60008060008060008060008060008060006101608c8e031215610ff557600080fd5b8b3561100081610e0b565b9a5060208c013561101081610e0b565b995061101e60408d01610e23565b985061102c60608d01610e23565b975060808c0135965060a08c0135955061104860c08d01610e23565b945060e08c01356001600160401b0381111561106357600080fd5b61106f8e828f01610ec4565b9450506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a9657610a9661109a565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156111125781516001600160a01b0316875295820195908201906001016110ed565b509495945050505050565b60408152600061113060408301856110d9565b905060018060a01b03831660208301529392505050565b600081518084526020808501945080840160005b838110156111125781518752958201959082019060010161115b565b600060018060a01b038086168352602085818501526060604085015260e08401855160806060870152818151808452610100880191508483019350600092505b808310156111d9578351861682529284019260019290920191908401906111b7565b50838801519450605f199350838782030160808801526111f98186611147565b94505050506040850151818584030160a08601526112178382611147565b92505050606084015160c084015280915050949350505050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561125c57600080fd5b81518015158114610b9c57600080fd5b60808152600061127f60808301876110d9565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b600060e0830160018060a01b038084511685526020818186015116818701528160408601511660408701528160608601511660608701528160808601511660808701528160a08601511660a087015260c085015160e060c0880152838151808652610100890191508383019550600092505b8083101561133857855185168252948301946001929092019190830190611316565b50979650505050505050565b634e487b7160e01b600052602160045260246000fd5b6008811061136a5761136a611344565b9052565b6003811061136a5761136a611344565b60208152600082516101c080602085015261139d6101e08501836112a4565b915060208501516113f06040860182805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b50604085015161140461012086018261135a565b50606085015161141861014086018261136e565b506080850151151561016085015260a0850151151561018085015260c085015115156101a085015260e0909401519390920192909252919050565b60006020828403121561146557600080fd5b5051919050565b918252602082015260400190565b600082601f83011261148b57600080fd5b8151602061149b610ee583610ea1565b82815260059290921b840181019181810190868411156114ba57600080fd5b8286015b84811015610f2d57805183529183019183016114be565b600060208083850312156114e857600080fd5b82516001600160401b03808211156114ff57600080fd5b908401906080828703121561151357600080fd5b61151b610e49565b82518281111561152a57600080fd5b8301601f8101881361153b57600080fd5b8051611549610ee582610ea1565b81815260059190911b8201860190868101908a83111561156857600080fd5b928701925b8284101561158f57835161158081610e0b565b8252928701929087019061156d565b845250505082840151828111156115a557600080fd5b6115b18882860161147a565b858301525060408301519350818411156115ca57600080fd5b6115d68785850161147a565b6040820152606083015160608201528094505050505092915050565b6001600160a01b0392831681529116602082015260400190565b60006001820161161e5761161e61109a565b5060010190565b60006080828403121561163757600080fd5b61163f610e49565b825161164a81610e0b565b8152602083015161165a81610e0b565b6020820152604083015161166d81610e0b565b6040820152606083015161168081610e0b565b60608201529392505050565b6001600160a01b039190911681526020019056fea2646970667358221220e6190c1ba47f5d30c5dcb44fbcadeb2ba3bc23ff80dea808bf308597906fb3fc64736f6c63430008120033";

type FeeSwapUtilsConstructorParams =
  | [linkLibraryAddresses: FeeSwapUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeSwapUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FeeSwapUtils__factory extends ContractFactory {
  constructor(...args: FeeSwapUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FeeSwapUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: FeeSwapUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$0bd2986ff9eae1ca31d173b6c133f035a7\\$__", "g"),
      linkLibraryAddresses[
        "contracts/fee/FeeBatchStoreUtils.sol:FeeBatchStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ff439aa65a80c9eec648f15db20b189505\\$__", "g"),
      linkLibraryAddresses[
        "contracts/market/MarketStoreUtils.sol:MarketStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeSwapUtils> {
    return super.deploy(overrides || {}) as Promise<FeeSwapUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeSwapUtils {
    return super.attach(address) as FeeSwapUtils;
  }
  override connect(signer: Signer): FeeSwapUtils__factory {
    return super.connect(signer) as FeeSwapUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeSwapUtilsInterface {
    return new utils.Interface(_abi) as FeeSwapUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeSwapUtils {
    return new Contract(address, _abi, signerOrProvider) as FeeSwapUtils;
  }
}

export interface FeeSwapUtilsLibraryAddresses {
  ["contracts/fee/FeeBatchStoreUtils.sol:FeeBatchStoreUtils"]: string;
  ["contracts/market/MarketStoreUtils.sol:MarketStoreUtils"]: string;
}
