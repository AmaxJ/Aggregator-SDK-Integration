/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GlvUtils,
  GlvUtilsInterface,
} from "../../../contracts/glv/GlvUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
    ],
    name: "InvalidMarketTokenPrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "contract Oracle",
        name: "oracle",
        type: "Oracle",
      },
      {
        internalType: "contract Glv",
        name: "glv",
        type: "Glv",
      },
    ],
    name: "getValue",
    outputs: [
      {
        internalType: "uint256",
        name: "glvValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61085661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063238964911461003a575b600080fd5b61004d6100483660046104bf565b61005f565b60405190815260200160405180910390f35b6040805160028082526060820183526000928392919060208301908036833701905050905060005b81518110156104485760008282815181106100a4576100a461050a565b602090810291909101015160405163a8d8fff560e01b81526001600160a01b03808a1660048301528216602482015290915060009073__$ff439aa65a80c9eec648f15db20b189505$__9063a8d8fff590604401608060405180830381865af4158015610115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101399190610557565b9050600073__$e53db83827f4e07ebc418caf7145b8c2d5$__637d494dc38a848b6001600160a01b0316635dcf719487602001516040518263ffffffff1660e01b815260040161018991906105e9565b6040805180830381865afa1580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c991906105fd565b6040808801519051631773dc6560e21b81526001600160a01b038f1691635dcf7194916101f991906004016105e9565b6040805180830381865afa158015610215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023991906105fd565b8d6001600160a01b0316635dcf719489606001516040518263ffffffff1660e01b815260040161026991906105e9565b6040805180830381865afa158015610285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a991906105fd565b6040516020016102e8906020808252601b908201527a4d41585f504e4c5f464143544f525f464f525f4445504f5349545360281b604082015260600190565b6040516020818303038152906040528051906020012060016040518863ffffffff1660e01b81526004016103229796959493929190610659565b61018060405180830381865af4158015610340573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036491906106f4565b50905060008112156103a0576040516328fa082760e11b81526001600160a01b0384166004820152602481018290526044015b60405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038516906370a08231906103cf908b906004016105e9565b602060405180830381865afa1580156103ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041091906107a8565b905061041b82610451565b61042590826107d7565b61042f90886107f4565b965050505050808061044090610807565b915050610087565b50509392505050565b6000808212156104a35760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610397565b5090565b6001600160a01b03811681146104bc57600080fd5b50565b6000806000606084860312156104d457600080fd5b83356104df816104a7565b925060208401356104ef816104a7565b915060408401356104ff816104a7565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b60405161016081016001600160401b038111828210171561055157634e487b7160e01b600052604160045260246000fd5b60405290565b60006080828403121561056957600080fd5b604051608081016001600160401b038111828210171561059957634e487b7160e01b600052604160045260246000fd5b60405282516105a7816104a7565b815260208301516105b7816104a7565b602082015260408301516105ca816104a7565b604082015260608301516105dd816104a7565b60608201529392505050565b6001600160a01b0391909116815260200190565b60006040828403121561060f57600080fd5b604080519081016001600160401b038111828210171561063f57634e487b7160e01b600052604160045260246000fd5b604052825181526020928301519281019290925250919050565b60006101a08201905060018060a01b03808a1683528089511660208401528060208a01511660408401528060408a01511660608401528060608a0151166080840152506106b360a083018880518252602090810151910152565b855160e08301526020860151610100830152845161012083015260208501516101408301528361016083015282151561018083015298975050505050505050565b60008082840361018081121561070957600080fd5b8351925061016080601f198301121561072157600080fd5b610729610520565b91506020850151825260408501516020830152606085015160408301526080850151606083015260a0850151608083015260c085015160a083015260e085015160c08301526101008086015160e08401526101208087015182850152610140915081870151818501525081860151818401525050809150509250929050565b6000602082840312156107ba57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107ee576107ee6107c1565b92915050565b808201808211156107ee576107ee6107c1565b600060018201610819576108196107c1565b506001019056fea26469706673582212202fa71c7d78b6d0f2125207e5b5f16873692bb2e3ebccf8928957514295750bf764736f6c63430008120033";

type GlvUtilsConstructorParams =
  | [linkLibraryAddresses: GlvUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GlvUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class GlvUtils__factory extends ContractFactory {
  constructor(...args: GlvUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, GlvUtils__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: GlvUtilsLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$ff439aa65a80c9eec648f15db20b189505\\$__", "g"),
      linkLibraryAddresses[
        "contracts/market/MarketStoreUtils.sol:MarketStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e53db83827f4e07ebc418caf7145b8c2d5\\$__", "g"),
      linkLibraryAddresses["contracts/market/MarketUtils.sol:MarketUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GlvUtils> {
    return super.deploy(overrides || {}) as Promise<GlvUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GlvUtils {
    return super.attach(address) as GlvUtils;
  }
  override connect(signer: Signer): GlvUtils__factory {
    return super.connect(signer) as GlvUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlvUtilsInterface {
    return new utils.Interface(_abi) as GlvUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlvUtils {
    return new Contract(address, _abi, signerOrProvider) as GlvUtils;
  }
}

export interface GlvUtilsLibraryAddresses {
  ["contracts/market/MarketStoreUtils.sol:MarketStoreUtils"]: string;
  ["contracts/market/MarketUtils.sol:MarketUtils"]: string;
}
