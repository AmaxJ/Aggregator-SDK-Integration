/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PositionStoreUtilsTest,
  PositionStoreUtilsTestInterface,
} from "../../../contracts/test/PositionStoreUtilsTest";

const _abi = [
  {
    inputs: [],
    name: "getEmptyPosition",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundingFeeAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtTime",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removePosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
            ],
            internalType: "struct Position.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeInUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "sizeInTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "collateralAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "borrowingFactor",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fundingFeeAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "shortTokenClaimableFundingAmountPerSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtBlock",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "increasedAtTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "decreasedAtTime",
                type: "uint256",
              },
            ],
            internalType: "struct Position.Numbers",
            name: "numbers",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "isLong",
                type: "bool",
              },
            ],
            internalType: "struct Position.Flags",
            name: "flags",
            type: "tuple",
          },
        ],
        internalType: "struct Position.Props",
        name: "position",
        type: "tuple",
      },
    ],
    name: "setPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105cd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301c5ecc614610046578063258c131f1461005b5780635c427a8c1461006e575b600080fd5b6100596100543660046102de565b61008c565b005b61005961006936600461042f565b6100fc565b61007661014b565b604051610083919061050a565b60405180910390f35b6040516318ed19e160e01b815273__$3d31b232fb363902662fbc281b11ab3357$__906318ed19e1906100c790869086908690600401610545565b60006040518083038186803b1580156100df57600080fd5b505af41580156100f3573d6000803e3d6000fd5b50505050505050565b6040516374b6fe1360e01b81526001600160a01b038085166004830152602482018490528216604482015273__$3d31b232fb363902662fbc281b11ab3357$__906374b6fe13906064016100c7565b610153610160565b61015b610160565b919050565b6040805160c081019091526000606082018181526080830182905260a0830191909152819081526020016101e760405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526040805160208181019092526000815291015290565b6001600160a01b038116811461021457600080fd5b50565b604051606081016001600160401b038111828210171561024757634e487b7160e01b600052604160045260246000fd5b60405290565b60405161016081016001600160401b038111828210171561024757634e487b7160e01b600052604160045260246000fd5b60006020828403121561029057600080fd5b604051602081016001600160401b03811182821017156102c057634e487b7160e01b600052604160045260246000fd5b604052905080823580151581146102d657600080fd5b905292915050565b60008060008385036102208112156102f557600080fd5b8435610300816101ff565b935060208501359250603f1981016101e08082121561031e57600080fd5b610326610217565b606083121561033457600080fd5b61033c610217565b9250604088013561034c816101ff565b8352606088013561035c816101ff565b6020840152608088013561036f816101ff565b604084015291825261016091609f19840183131561038c57600080fd5b61039461024d565b935060a0880135845260c0880135602085015260e08801356040850152610100808901356060860152610120808a01356080870152610140808b013560a0880152858b013560c08801526101808b013560e08801526101a08b0135838801526101c08b013582880152848b01358188015250505083602082015261041c896102008a0161027e565b6040820152809450505050509250925092565b60008060006060848603121561044457600080fd5b833561044f816101ff565b9250602084013591506040840135610466816101ff565b809150509250925092565b80516001600160a01b03908116835260208083015182169084015260409182015116910152565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152505050565b60006101e08201905061051e828451610471565b60208301516105306060840182610498565b5060408301515115156101c083015292915050565b6001600160a01b038416815260208101839052815161022082019061056e906040840190610471565b602083015161058060a0840182610498565b50604083015151151561020083015294935050505056fea2646970667358221220f8a1768e67f0cab6d6744722675ddded3236f2cda25c6028c0f770e20dc1e35064736f6c63430008120033";

type PositionStoreUtilsTestConstructorParams =
  | [
      linkLibraryAddresses: PositionStoreUtilsTestLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionStoreUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class PositionStoreUtilsTest__factory extends ContractFactory {
  constructor(...args: PositionStoreUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        PositionStoreUtilsTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: PositionStoreUtilsTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$3d31b232fb363902662fbc281b11ab3357\\$__", "g"),
      linkLibraryAddresses[
        "contracts/position/PositionStoreUtils.sol:PositionStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PositionStoreUtilsTest> {
    return super.deploy(overrides || {}) as Promise<PositionStoreUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PositionStoreUtilsTest {
    return super.attach(address) as PositionStoreUtilsTest;
  }
  override connect(signer: Signer): PositionStoreUtilsTest__factory {
    return super.connect(signer) as PositionStoreUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionStoreUtilsTestInterface {
    return new utils.Interface(_abi) as PositionStoreUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PositionStoreUtilsTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PositionStoreUtilsTest;
  }
}

export interface PositionStoreUtilsTestLibraryAddresses {
  ["contracts/position/PositionStoreUtils.sol:PositionStoreUtils"]: string;
}
